name: ci

on:
  push:
    branches-ignore: [release]
    paths:
      - "src/**"
      - "testdata/**"
      - "tests/**"
      - "pyproject.toml"
      - "setup.py"
      - "tox.ini"
      - ".github/workflows/ci.yml"
  pull_request:
    branches: [main]
    paths:
      - "src/**"
      - "testdata/**"
      - "tests/**"
      - "pyproject.toml"
      - "setup.py"
  workflow_dispatch:
    inputs:
      python-version:
        required: false
        type: string
  workflow_call:
    inputs:
      python-version:
        required: false
        type: string
      event-type:
        required: true
        type: string

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      python-version: ${{ steps.vars.outputs.python-version }}
    steps:
    - name: Checkout code to determine the minimum supported python version
      if: ${{ inputs.python-version == '' }}
      uses: actions/checkout@v3
      with:
        repository: pkgcraft/pkgcraft-python

    - name: Set python versions to test against
      id: vars
      run: |
        if [[ -n "${{ inputs.python-version }}" ]]; then
          echo "python-version=$(jq 'split(",")' -Rc <(echo '${{ inputs.python-version }}'))" >> $GITHUB_OUTPUT
        else
          # pull supported python versions from classifiers
          readarray -t vers < <(sed -rn '/Programming Language :: Python :: / s/.*([0-9]\.[0-9]+).*/\1/p' pyproject.toml)
          if [[ ${#vers[@]} -ge 2 ]]; then
            echo "python-version=['${vers[0]}', '${vers[-1]}']" >> $GITHUB_OUTPUT
          else
            exit 1
          fi
        fi

  test:
    needs: setup
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python-version: ${{ fromJson(needs.setup.outputs.python-version) }}

    steps:
    - name: Set pkgcraft dir env var
      run: echo pkgcraft_dir=~/pkgcraft >> $GITHUB_ENV

    - name: Download pkgcraft-c library from most recent run
      if: ${{ inputs.event-type == '' }}
      uses: dawidd6/action-download-artifact@v2
      with:
        github_token: ${{ secrets.PKGCRAFT_CI_TOKEN }}
        repo: pkgcraft/pkgcraft
        branch: main
        workflow: pkgcraft-c.yml
        workflow_conclusion: ""
        search_artifacts: true
        name: pkgcraft-c-${{ runner.os }}
        path: ${{ env.pkgcraft_dir }}

    - name: Download pkgcraft-c library from running workflow
      if: ${{ inputs.event-type != '' }}
      uses: actions/download-artifact@v3
      with:
        name: pkgcraft-c-${{ runner.os }}
        path: ${{ env.pkgcraft_dir }}

    - name: Checkout code
      uses: actions/checkout@v3
      with:
        repository: pkgcraft/pkgcraft-python
        # checkout full history for setuptools-scm
        fetch-depth: 0
        submodules: true

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: 'pyproject.toml'

    - name: Install dependencies
      run: pip install tox

    - name: Override build variables
      run: |
        echo "PKG_CONFIG_PATH=${pkgcraft_dir}" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=${pkgcraft_dir}/lib" >> $GITHUB_ENV
        echo "DYLD_LIBRARY_PATH=${pkgcraft_dir}/lib" >> $GITHUB_ENV

    - name: Run tests
      run: tox -c tox.ini -e coverage

    - name: Upload coverage to Codecov
      if: ${{ inputs.python-version == '' }}
      uses: codecov/codecov-action@v3
