name: Deploy

on:
  push:
    branches: [deploy]
    tags: [v*]
  workflow_dispatch:
    inputs:
      pkgcraft-c-ref:
        required: false
        type: string
        default: 'main'

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      pkgcraft-c-ref: ${{ steps.vars.outputs.pkgcraft-c-ref }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Determine target pkgcraft-c version
      id: vars
      run: |
        if [[ -n "${{ inputs.pkgcraft-c-ref }}" ]]; then
          echo "pkgcraft-c-ref=${{ inputs.pkgcraft-c-ref }}" >> $GITHUB_OUTPUT
        else
          max_ver=$(sed -rn '/^MAX_VERSION =/s/^.*=\s*"([0-9](\.[0-9])*)(.*)/\1/p' setup.py)
          if [[ -n ${max_ver} ]]; then
            echo "pkgcraft-c-ref=pkgcraft-c-${max_ver}" >> $GITHUB_OUTPUT
          else
            exit 1
          fi
        fi

  build-sdist:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        # checkout full history for setuptools-scm
        fetch-depth: 0
        submodules: true

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Build sdist
      run: |
        pip install tox
        tox -e sdist

    - name: Upload sdist artifact
      uses: actions/upload-artifact@v3
      with:
        name: sdist
        path: dist/*.tar.gz
        if-no-files-found: error
        retention-days: 3

  build-wheels:
    needs: ["build-sdist", "setup"]
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: 'x86_64'
          - os: ubuntu-latest
            arch: 'aarch64'
          - os: ubuntu-latest
            arch: 'ppc64le'
    runs-on: ${{ matrix.os }}
    env:
      MACOSX_DEPLOYMENT_TARGET: ${{ matrix.macos-target }}
      CIBW_CONTAINER_ENGINE: 'docker'
      CIBW_PLATFORM: 'auto'
      PKGCRAFT_C_REF: ${{ needs.setup.outputs.pkgcraft-c-ref }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Download sdist artifact
      uses: actions/download-artifact@v3
      with:
        name: sdist
        path: dist

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Set up QEMU
      if: runner.os == 'Linux' && matrix.arch != 'x86_64'
      uses: docker/setup-qemu-action@v2
      with:
        platforms: ${{ matrix.arch }}

    - name: Build wheels
      run: .github/build-wheels ${{ matrix.arch }}

    - name: Verify wheels
      run: |
        pip install twine
        twine check wheels/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: wheels
        path: wheels/
        if-no-files-found: error
        retention-days: 3

  publish:
    if: startsWith(github.ref, 'refs/tags/')
    needs: ["build-sdist", "build-wheels"]
    runs-on: ubuntu-latest
    steps:
    - name: Download sdist and wheel artifacts
      uses: actions/download-artifact@v3

    - name: Upload sdist to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages_dir: sdist/
        print_hash: true

    - name: Upload wheels to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        packages_dir: wheels/
        print_hash: true

    - name: Create GitHub release
      uses: softprops/action-gh-release@v1
      with:
        files: sdist/*.tar.gz
        fail_on_unmatched_files: true
