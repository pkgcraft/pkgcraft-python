[tox]
envlist = py39, py310
isolated_build = true

[testenv]
skip_sdist = true
skip_install = true
passenv = PKG_CONFIG_PATH
setenv =
    # forcibly enable pytest colors
    PY_COLORS = 1
    # run tests against in-place build for doctest and coverage support
    PYTHONPATH = {toxinidir}/src
deps =
    cython
    pytest
    pytest-cython
commands =
    # run doctests
    python setup.py build_ext --inplace
    pytest --doctest-cython {posargs} src/pkgcraft
    # run regular tests
    pytest {posargs} tests

[testenv:coverage]
setenv =
    # forcibly enable pytest colors
    PY_COLORS = 1
    # run tests against in-place build for doctest and coverage support
    PYTHONPATH = {toxinidir}/src
    # enable cython code coverage
    CYTHON_COVERAGE = 1
deps =
    coverage
    cython
    pytest
    pytest-cython
commands =
    # run doctests
    python setup.py build_ext --force --inplace
    coverage run -m pytest --doctest-cython {posargs} src/pkgcraft
    # run regular tests
    coverage run -m pytest {posargs} tests
    coverage combine
    # generate coverage file for codecov
    coverage xml
    coverage report

[testenv:bench]
skip_sdist = false
skip_install = false
# forcibly enable pytest colors
setenv = PY_COLORS = 1
deps =
    pytest-benchmark
    pkgcore
    portage
commands =
    pytest {posargs} benches --benchmark-group-by=func --benchmark-warmup=on

[testenv:membench]
skip_sdist = false
skip_install = false
deps =
    pkgcore
    portage
    humanize
    psutil
commands =
    python {toxinidir}/benches/atom_memory_usage.py

[testenv:valgrind]
allowlist_externals = valgrind
passenv =
    PKG_CONFIG_PATH
    # required for .valgrindrc to be loaded
    HOME
commands =
    # run doctests
    python setup.py build_ext --inplace
    valgrind pytest --doctest-cython {posargs} src/pkgcraft
    # run regular tests
    valgrind pytest {posargs} tests
